import java.nio.channels.ReadableByteChannel;
import java.nio.ByteBuffer;

import java.io.FileInputStream;
import java.io.File;

public class test_makefile
{
    public static void main(String args[])
    {
	try {
	    // Obtain a channel
	    ReadableByteChannel channel = new FileInputStream("../conf/servlist_.conf").getChannel();

	    long file_size = new File("../conf/servlist_.conf").length();

	    // Create a direct ByteBuffer; see also Creating a ByteBuffer
	    //	    ByteBuffer buf = ByteBuffer.allocate(1024);
	    int numRead = 0;
	    while (true) {		
		ByteBuffer buf = ByteBuffer.allocate((int)file_size);
		// read() places read bytes at the buffer's position so the
		// position should always be properly set before calling read()
		// This method sets the position to 0
		buf.rewind();
		// Read bytes from the channel
		if( channel.read(buf) > 0)
		    {
			// The read() method also moves the position so in order to
			// read the new bytes, the buffer's position must be set back to 0

			byte[] b = buf.array();

			// Read bytes from ByteBuffer; see also
			// Getting Bytes from a ByteBuffer
			System.out.print(new String(b , "UTF-8"));
		    }
		else
		    break;
	    }
	}
	catch (Exception e) 
	    {
		System.out.println(e.getMessage());
	    }

	System.out.println();
    }
}