import java.util.Vector;

import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JCheckBox;
import javax.swing.JScrollPane;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;

import java.awt.event.WindowListener;
import java.awt.event.WindowEvent;

import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;

import java.sql.SQLException;

class UserSettings extends JDialog implements ActionListener, WindowListener, MouseListener, KeyListener
{
    //    private Staring start;
    private Vector<Connection> conn;
    private DB_connection db_conn;
    private MainWindow mw;

    private JLabel user_info;
    private JLabel nick_name;
    private JLabel second_choice;
    private JLabel third_choice;
    private JLabel user_name;
    private JLabel real_name;
    private JLabel networks;

    private JTextField nick_name_tf;
    private JTextField second_choice_tf;
    private JTextField third_choice_tf;
    private JTextField user_name_tf;
    private JTextField real_name_tf;
    
    private JList<String> network_list;
    
    private JButton add_button;
    private JButton remove_button;
    private JButton edit_button;
    private JButton sort_button;
    
    private JCheckBox skip_net_list;

    private JButton close_button;
    private JButton connect_button;

    UserSettings()
    {
	super( Constants.userSettingsTitle );
	//	start = s;
	mw = m;
	db_conn = new DB_connection();
	
	conn = new Vector<Connection>();
	//	db_conn = s.get_db_connection();
	try
	    {
		initialise();
	    }
	catch( SQLException se )
	    {
		Utility.showError( se.getMessage(), null );
	    }
    }

    private void initialise() throws SQLException
    {
	Container pane = this.getContentPane();
	pane.setLayout( new GridBagLayout() );
	this.setLocationRelativeTo( null );

	this.setResizable( false );
	this.setMinimumSize( new Dimension( 550, 500 ) );
	this.setPreferredSize( new Dimension( 550, 500 ) );
	this.setMaximumSize( new Dimension( 550, 500 ) );

	GridBagConstraints gbc;

	gbc = Utility.modifyGbc( 0, 0, 1, 1, 0, 0, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.HORIZONTAL, new Insets( 0, 0, 0, 0 ), 0, 0 );
	user_info = Utility.createLabel( Constants.user_info_label, "" );
	pane.add( user_info, gbc );

	gbc = Utility.modifyGbc( 0, 1, 1, 1, 0, 0, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.VERTICAL, new Insets( 0, 0, 0, 0 ), 0, 0 );
	nick_name = Utility.createLabel( Constants.nick_name_label, "" );
	pane.add( nick_name, gbc );

	gbc = Utility.modifyGbc( 0, 2, 1, 1, 0, 0, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.VERTICAL, new Insets( 0, 0, 0, 0 ), 0, 0 );
	second_choice = Utility.createLabel( Constants.second_choice_label, "");
	pane.add( second_choice, gbc );

	gbc = Utility.modifyGbc( 0, 3, 1, 1, 0, 0, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.VERTICAL, new Insets( 0, 0, 0, 0 ), 0, 0 );
	third_choice = Utility.createLabel( Constants.third_choice_label, "");
	pane.add( third_choice, gbc );

	gbc = Utility.modifyGbc( 0, 4, 1, 1, 0, 0, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.VERTICAL, new Insets( 0, 0, 0, 0 ), 0, 0 );
	user_name = Utility.createLabel( Constants.user_name_label, "" );
	pane.add( user_name, gbc );

	gbc = Utility.modifyGbc( 0, 5, 1, 1, 0, 0, GridBagConstraints.FIRST_LINE_START, GridBagConstraints.VERTICAL, new Insets( 0, 0, 0, 0 ), 0, 0 );
	real_name = Utility.createLabel( Constants.real_name_label, "" );
	pane.add( real_name, gbc );
	
	gbc = Utility.modifyGbc( 1, 1, GridBagConstraints.REMAINDER, 1, 2, 0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets( 0, 5, 0, 0 ), 0, 0 );
	nick_name_tf = Utility.createTextField( db_conn.get_nick_name(), true );
	pane.add( nick_name_tf, gbc );

	gbc = Utility.modifyGbc( 1, 2, GridBagConstraints.REMAINDER, 1, 2, 0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets( 0, 5, 0, 0 ), 0, 0 );
	second_choice_tf = Utility.createTextField( db_conn.get_second_choice(), true );
	pane.add( second_choice_tf, gbc );

	gbc = Utility.modifyGbc( 1, 3, GridBagConstraints.REMAINDER, 1, 2, 0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets( 0, 5, 0, 0 ), 0, 0 );
	third_choice_tf = Utility.createTextField( db_conn.get_third_choice(), true );
	pane.add( third_choice_tf, gbc );

	gbc = Utility.modifyGbc( 1, 4, GridBagConstraints.REMAINDER, 1, 2, 0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets( 0, 5, 0, 0 ), 0, 0 );
	user_name_tf = Utility.createTextField( db_conn.get_user_name(), true );
	pane.add( user_name_tf, gbc );

	gbc = Utility.modifyGbc( 1, 5, GridBagConstraints.REMAINDER, 1, 2, 0, GridBagConstraints.EAST, GridBagConstraints.HORIZONTAL, new Insets( 0, 5, 0, 0 ), 0, 0 );
	real_name_tf = Utility.createTextField( db_conn.get_real_name(), true );
	pane.add( real_name_tf, gbc );

	gbc = Utility.modifyGbc( 0, 6, GridBagConstraints.RELATIVE, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.BOTH, new Insets( 0, 5, 0, 0 ), 0, 0 );
	pane.add( Utility.createLabel("",""), gbc );

	gbc = Utility.modifyGbc( 0, 7, GridBagConstraints.RELATIVE, 1, 0, 0, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets( 10, 0, 0, 0 ), 0, 0 );
	networks = Utility.createLabel( Constants.networks_label, "" );
	pane.add( networks, gbc );

	gbc = Utility.modifyGbc( 0, 8, 2, 1, 1, 0, GridBagConstraints.LINE_START, GridBagConstraints.HORIZONTAL, new Insets( 0, 0, 0, 0 ), 0, 0 );
	skip_net_list = Utility.createCheckBox( Constants.skip_net_list_text, "", Constants.skip_net_list_ac, this, false );
	pane.add( skip_net_list, gbc );

	gbc = Utility.modifyGbc( 3, 9, GridBagConstraints.REMAINDER, 1, 0, 0, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets( 5, 0, 0, 0 ), 28, 0 );
	add_button = Utility.createButton( Constants.add_button_text, "", Constants.add_button_ac, this );
	pane.add( add_button, gbc );

	gbc = Utility.modifyGbc( 3, 10, GridBagConstraints.REMAINDER, 1, 0, 0, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets( 5, 0, 0, 0 ), 0, 0 );
	remove_button = Utility.createButton( Constants.remove_button_text, "", Constants.remove_button_ac, this );
	pane.add( remove_button, gbc );

	gbc = Utility.modifyGbc( 3, 11, GridBagConstraints.REMAINDER, 1, 0, 0, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets( 5, 0, 0, 0 ), 28, 0 );
	edit_button = Utility.createButton( Constants.edit_button_text, "", Constants.edit_button_ac, this );
	pane.add( edit_button, gbc );

	gbc = Utility.modifyGbc( 3, 12, GridBagConstraints.REMAINDER, 1, 0, 0, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets( 5, 0, 0, 0 ), 26, 0 );
	sort_button = Utility.createButton( Constants.sort_button_text, "", Constants.sort_button_ac, this );
	pane.add( sort_button, gbc );

	//	Vector<String> servers = db_conn.get_network_server();
	Vector<String> servers = new Vector<String>();
	servers.add("127.0.0.1");
	servers.add("irc.freenode.net");
	servers.add("irc.accessirc.net");

	gbc = Utility.modifyGbc( 0, 9, 2, 8, 1, 2, GridBagConstraints.LINE_START, GridBagConstraints.BOTH, new Insets( 0, 0, 0, 0 ), 0, 0 );
	network_list = new JList<String>( (Vector<String>)(servers) );
	pane.add( new JScrollPane( network_list ), gbc );
	
	/*
	gbc = Utility.modifyGbc( 0, 12, 2, 8, 1, 2, GridBagConstraints.LINE_START, GridBagConstraints.NONE, new Insets( 5, 0, 10, 5 ), 0, 0 );
	pane.add( Utility.createLabel("",""), gbc );

	gbc = Utility.modifyGbc( 1, 12, 2, 8, 1, 2, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets( 5, 0, 10, 5 ), 0, 0 );
	pane.add( Utility.createLabel("",""), gbc );

	gbc = Utility.modifyGbc( 1, 13, 2, 8, 1, 2, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets( 5, 0, 10, 5 ), 0, 0 );
	pane.add( Utility.createLabel("",""), gbc );

	gbc = Utility.modifyGbc( 1, 14, 2, 8, 1, 2, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets( 5, 0, 10, 5 ), 0, 0 );
	pane.add( Utility.createLabel("",""), gbc );

	gbc = Utility.modifyGbc( 1, 15, 2, 8, 1, 2, GridBagConstraints.LINE_END, GridBagConstraints.NONE, new Insets( 5, 0, 10, 5 ), 0, 0 );
	pane.add( Utility.createLabel("",""), gbc );
	*/


	gbc = Utility.modifyGbc( 0, 18, GridBagConstraints.RELATIVE, GridBagConstraints.REMAINDER, 1, 2, GridBagConstraints.LAST_LINE_START, GridBagConstraints.NONE, new Insets( 0, 0, 0, 50 ), 0, 0 );
	close_button = Utility.createButton( Constants.close_button_text, "", Constants.close_button_ac, this );
	pane.add( close_button, gbc );

	gbc = Utility.modifyGbc( 1, 18, GridBagConstraints.REMAINDER, GridBagConstraints.REMAINDER, 1, 2, GridBagConstraints.LAST_LINE_END, GridBagConstraints.NONE, new Insets( 0, 0, 0, 0 ), 0, 0 );
	connect_button = Utility.createButton( Constants.connect_button_text, "", Constants.connect_button_ac, this );
	pane.add( connect_button, gbc );

	/*
	*/

        this.setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);
	this.setVisible( true );
    }

    protected void visible()
    {
	this.setVisible( true );
    }

    protected void invisible()
    {
	this.setVisible( false );
    }

    public void actionPerformed( ActionEvent ae )
    {
	String action = ae.getActionCommand();

	if( action.equals( Constants.add_button_ac ) )
	    {}
	else if( action.equals( Constants.remove_button_ac ) )
	    {}
	else if( action.equals( Constants.edit_button_ac ) )
	    {}
	else if( action.equals( Constants.sort_button_ac ) )
	    {}
	else if( action.equals( Constants.close_button_ac ) )
	    {
		System.exit( 0 );
	    }
	else if( action.equals( Constants.connect_button_ac ) )
	    {
		String nick_name = nick_name_tf.getText().trim();
		String second_choice = second_choice_tf.getText().trim();
		String third_choice = third_choice_tf.getText().trim();
		String user_name = user_name_tf.getText().trim();
		String real_name = real_name_tf.getText().trim();

		if( user_name == "" || real_name == "" )
		    {
			//		Utility.showError( Constants.user_real_necessary );

			System.out.println( Constants.user_real_necessary );
		    }
		else
		    {
			invisible();
			try
			    {
				db_conn.set_nick_name( nick_name );
				db_conn.set_second_choice( second_choice );
				db_conn.set_third_choice( third_choice );
				db_conn.set_user_name( user_name );
				db_conn.set_real_name( real_name );
			    }
			catch( SQLException se )
			    {
				Utility.showError( se.getMessage(), null );
			    }

			String selectedServer = (String)network_list.getSelectedValue();
			
			conn.add( mw.get_connection() );
			
			Connection c = (Connection)conn.lastElement();

 			if( c.connect_to_server( selectedServer, 6667, db_conn, mw ) )
			    {
				
				mw.visible();
				try
				    {
					mw.initialise( selectedServer, db_conn.get_nick_name() );
				    }
				catch( SQLException se )
				    {
					Utility.showError( se.getMessage(), null );
				    }
				mw.setText( selectedServer, "Connected");
				/*
				try
				    {
					Thread.sleep( 60 );
				    }
				catch( InterruptedException ie )
				    {}
				*/
				try
				    {
					c.register();
				    }
				catch( SQLException se )
				    {
					Utility.showError( se.getMessage(), null );
				    }
				new Thread( c ).start();
			    }
		    }
	    }
	else
	    {
		System.out.println( action );
	    }
    }

    public void windowActivated( WindowEvent we )
    {}

    public void windowClosed( WindowEvent we )
    {}

    public void windowDeactivated( WindowEvent we )
    {}

    public void windowDeiconified( WindowEvent we )
    {}

    public void windowIconified( WindowEvent we )
    {}

    public void windowOpened( WindowEvent we )
    {}

    public void windowClosing( WindowEvent we )
    {}

    public void mouseClicked( MouseEvent e )
    {}

    public void mouseEntered( MouseEvent e )
    {}

    public void mouseExited( MouseEvent e )
    {}

    public void mousePressed( MouseEvent e )
    {}

    public void mouseReleased( MouseEvent e )
    {}

    public void keyPressed( KeyEvent ke )
    {}

    public void keyReleased( KeyEvent ke )
    {}

    public void keyTyped( KeyEvent ke )
    {}
}